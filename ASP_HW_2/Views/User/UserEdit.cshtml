@model ASP_HW_2.Models.ViewModels.UserChangePassword

<body class="bg-secondary">

    <div class="w-100 d-flex justify-content-center mb-3 flex-column align-items-center">
        <h1 class="text-light">Change Password</h1>

        @if(!String.IsNullOrEmpty(ViewBag.Message))
        {
            <h4 class="text-success">
                @ViewBag.Message
            </h4>
        }
        
    </div>

    <form id="editUser" asp-action="UserEdit" asp-controller="User" asp-antiforgery="true" class="d-flex w-100 flex-column align-items-center">

        @Html.Hidden("UserId", ViewBag.UserId, null)

        @Html.LabelFor(x => x.OldPassword, "Enter your old password", new { @class = "mt-2 text-light" })
        @Html.TextBoxFor(x => x.OldPassword, new { @type = "password", @class = "w-50" })

        @Html.LabelFor(x => x.NewPassword, "Enter your new password", new { @class = "mt-2 text-light" })
        @Html.TextBoxFor(x => x.NewPassword, new { @type = "password", @class = "w-50" })

        @Html.LabelFor(x => x.ConfirmPassword, "Confirm your new password", new { @class = "mt-2 text-light" })
        @Html.TextBoxFor(x => x.ConfirmPassword, new { @type = "password", @class = "w-50" })

        <div>
            @Html.ValidationMessageFor(x => x.OldPassword)
            @Html.ValidationMessageFor(x => x.NewPassword)
            @Html.ValidationMessageFor(x => x.ConfirmPassword)
        </div>

        <input type="submit" value="Apply changes" class="btn btn-light mt-4 w-50" />
    </form>


</body>
